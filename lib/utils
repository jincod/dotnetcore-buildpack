#!/usr/bin/env bash

function install_dotnet() {
  local BUILD_DIR="$1"
  local CORE_CHANNEL="${2:-2.0}"
  local INSTALL_SCRIPT="$CACHE_DIR/dotnet-install.sh"
  local INSTALL_DIR="$CACHE_DIR/dotnet"

  topic "Installing .NET Core SDK"
  if [ ! -d "$INSTALL_DIR" ]; then
    if [ ! -d $CACHE_DIR ]; then
      mkdir -p $CACHE_DIR
    fi

    # Get the installer
    curl -sSL -o $INSTALL_SCRIPT https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh

    # And made it executable
    chmod +x $INSTALL_SCRIPT

    export DOTNET_INSTALL_SKIP_PREREQS=1
    $INSTALL_SCRIPT --install-dir $INSTALL_DIR --channel $CORE_CHANNEL
  fi

  # Copy it to the app directory
  cp -R $INSTALL_DIR $BUILD_DIR/dotnet
  
  ln -s $BUILD_DIR/dotnet /app
}

# https://github.com/ddollar/heroku-buildpack-apt
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function apt_install(){
  echo "Install package"

  local apt_cache_dir="$CACHE_DIR/apt/cache"
  local apt_state_dir="$CACHE_DIR/apt/state"
  
  mkdir -p "$apt_cache_dir/archives/partial"
  mkdir -p "$apt_state_dir/lists/partial"
  
  local apt_options="-o debug::nolocking=true -o dir::cache=$apt_cache_dir -o dir::state=$apt_state_dir"
  
  topic "Cleaning apt caches"
  apt-get $apt_options clean | indent
  
  topic "Updating apt caches"
  apt-get  --allow-unauthenticated $apt_options update | indent

  for package in "$@"; do
    if [[ $package == *deb ]]; then
      local package_name=$(basename $package .deb)
      local package_file=$apt_cache_dir/archives/$package_name.deb
      topic "Fetching $package"
      curl -s -L -z $package_file -o $package_file $package 2>&1 | indent
    else
      topic "Fetching .debs for $package"
      apt-get $apt_options -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -d install --reinstall $package | indent
    fi
  done
  
  mkdir -p "$BUILD_DIR/.apt"

  for DEB in $(ls -1 $apt_cache_dir/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB "$BUILD_DIR/.apt/"
  done
  
  export PATH="$PATH:$BUILD_DIR/.apt/usr/bin"
  export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LD_LIBRARY_PATH-}"
  export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LIBRARY_PATH-}"
  export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:${INCLUDE_PATH-}"
  export CPATH="$INCLUDE_PATH"
  export CPPPATH="$INCLUDE_PATH"
  export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:${PKG_CONFIG_PATH-}"
  echo "APT packages Installed"
}

export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LANG)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}

function valid_project() {
  SDK_TYPE=`python3 -c "from xml.etree.ElementTree import ElementTree;import io;print(ElementTree(file=io.FileIO('$1')).getroot().attrib['Sdk'])"`
  [ "$SDK_TYPE" = "Microsoft.NET.Sdk.Web" ]
}
