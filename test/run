#!/usr/bin/env bash

testDotNetCore2() {
  compile "dotnetcore-2"
  assertCaptured "dotnetcore-2 ->"
  assertCapturedSuccess
}

testDotNetCore21() {
  compile "dotnetcore-2.1"
  assertCaptured "dotnetcore-2.1 ->"
  assertCapturedSuccess
}

testDotNetCore2CustomProcfile() {
  compile "custom-procfile"
  assertCaptured "Be careful with custom Procfile"
  assertCapturedSuccess
}

testDotNetCore22() {
  compile "dotnetcore-2.2"
  assertCaptured "dotnetcore-2.2 ->"
  assertCapturedSuccess
}

testDotNetCore30() {
  compile "dotnetcore-3.0"
  assertCaptured "dotnetcore-3.0 ->"
  assertCapturedSuccess
}

testDotNetCore30Fsharp() {
  compile "fsharp-dotnetcore-3.0"
  assertCaptured "dotnetcore-3.0 ->"
  assertCapturedSuccess
}

testDotNetCore31() {
  compile "dotnetcore-3.1"
  assertCaptured "dotnetcore-3.1 ->"
  assertCapturedSuccess
}

testDotNetCore5() {
  compile "dotnetcore-5.0"
  assertCaptured "dotnetcore-5.0 ->"
  assertCapturedSuccess
}

testLocalTools() {
  compile "local-tools"
  assertCaptured "Restore was successful."
  assertCapturedSuccess
}

# Utils
echo "Get Utils for Test"
pushd $(dirname 0) >/dev/null
popd >/dev/null

source $(pwd)/test/utils

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture $(pwd)/bin/detect $(pwd)/test/fixtures/$1
}

compile_dir=""

default_process_types_cleanup() {
  file="/tmp/default_process_types"
  if [ -f "$file" ]; then
    rm "$file"
  fi
}

compile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

compileDir() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=${1:-$(mktmpdir)}
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${cache_dir} ${env_dir}
}

release() {
  bp_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/release ${bp_dir}/test/fixtures/$1
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

source $(pwd)/test/shunit2
